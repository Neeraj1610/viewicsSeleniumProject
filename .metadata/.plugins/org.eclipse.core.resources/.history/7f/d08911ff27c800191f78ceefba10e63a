package com.myproject.basepageobject;

import java.io.File;
import java.io.IOException;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.ElementNotVisibleException;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.gargoylesoftware.htmlunit.ElementNotFoundException;
import com.myproject.tutorial.log4j.Log4jLogger;

public class BasePageObject {

	public WebDriver driver;

	public BasePageObject(WebDriver driver) {

        // Set the driver
        this.driver = driver;
    }
	
	public BasePageObject() {

        // Set 
    }

	private void highlightElement(WebElement element)
	{
		JavascriptExecutor jsExecutor=(JavascriptExecutor) driver;

		jsExecutor.executeScript("arguments[0].setAttribute('style', 'background: yellow; border: 2px solid red;');", element);
		try {
			Thread.sleep(500);
		} catch (InterruptedException e) {

			System.out.println(e.getMessage());
		}

		jsExecutor.executeScript("arguments[0].setAttribute('style','border: solid 2px white');", element);

	}

	private void highlightElement(String xpath)
	{

		JavascriptExecutor jsExecutor=(JavascriptExecutor) driver;

		jsExecutor.executeScript("arguments[0].setAttribute('style', 'background: yellow; border: 2px solid red;');", driver.findElement(By.xpath(xpath)));
	}

	public void takeScreenShot(String destFilePath) throws IOException
	{
		TakesScreenshot takeScreenshot=(TakesScreenshot) driver;

		File srcFile=takeScreenshot.getScreenshotAs(OutputType.FILE);

		FileUtils.copyFile(srcFile, new File(destFilePath));		
	}

	public void sendKeys(WebElement element,String text)
	{
		highlightElement(element);
		element.sendKeys(text);
	}

	public void click(WebElement element)
	{
		highlightElement(element);
		element.click();
	}
	
	public boolean isElementPresent(String xpathToBeModified, String dynamicVariable) {

        // Declare modified xpath
        String modifiedXpath = xpathToBeModified;

        if (!dynamicVariable.equals("")) {
            // Replace dynamic variable(s)
            modifiedXpath = xpathToBeModified.replaceFirst("DYNAMIC_LOCATOR_VARIABLE", dynamicVariable);
        }

        // Wait for webelement to be visible
        try {
            WebDriverWait wait = new WebDriverWait(driver,30);
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(modifiedXpath)));
            Log4jLogger.info("Element is present");
            return true;
        } catch (Exception ex) {
            Log4jLogger.error("Element is not present");
            return false;
        }
	}
	
    public void clearAndSetText(WebElement webElement, String text) throws Exception {

        // BasePageObjects basePageObjects = new BasePageObjects();
  
        Log4jLogger.info("Set text = '" + text + "' in '" + webElement + "'");

        // wait for text box to be visible

        waitForElementVisibility(webElement);

        // Set text
        click(webElement);
        webElement.clear();
        webElement.sendKeys(text);
    }
    
    public void waitForElementVisibility(WebElement elemToWaitForVisibility) throws ElementNotVisibleException {

        // Extract the Locator from WebElement
        String locator = null;
        if ((elemToWaitForVisibility instanceof WebElement)) {
            Object elemToWaitForVisibilityObject = elemToWaitForVisibility;
            String textOfElemToWaitForVisibility = elemToWaitForVisibilityObject.toString();

            /*
             * This will split text and get that locator of Element text is
             * something like this [[FirefoxDriver: firefox on WINDOWS
             * (9170d4a5-1554-4018-adac-f3f6385370c0)] -> xpath:
             * //div[contains(@
             * class,'forum-topic-preview')]//div[contains(@class,'small-human')
             * ]]
             */
            String[] arrayTextOfElemToWaitForVisibility = textOfElemToWaitForVisibility.split(":");
            String[] locatorType = arrayTextOfElemToWaitForVisibility[1].split(" ");
            for (int i = 0; i < arrayTextOfElemToWaitForVisibility.length; i++) {
                if (i == 0 || i == 1) {
                    textOfElemToWaitForVisibility = "";
                } else {
                    textOfElemToWaitForVisibility = textOfElemToWaitForVisibility
                            + arrayTextOfElemToWaitForVisibility[i];
                }
            }
            locator = locatorType[locatorType.length - 1] + " = ";
            locator = locator + textOfElemToWaitForVisibility;
        }
        try {

            WebDriverWait wait = new WebDriverWait(driver, 90);
            wait.until(ExpectedConditions.visibilityOf(elemToWaitForVisibility));
            Log4jLogger.info("Element is visible");

        } catch (ElementNotVisibleException enve) {
            // Log and throw the ElementNotVisibleException
            Log4jLogger.error(enve.getMessage());
            Log4jLogger.error(enve.getAdditionalInformation());
            throw enve;
        } catch (ElementNotFoundException enfe) {
            // Log and throw the ElementNotFoundException
            Log4jLogger.error(enfe.getMessage());
            Log4jLogger.error(enfe.getElementName());
            throw enfe;
        } catch (Exception ex) {
        	Log4jLogger.error(ex.getMessage());
            throw ex;
        }
    }
    
    public WebElement getWebElementWithDynamicXpath(String xpathToBeModified, String dynamicVariable) {

        // Declare modified xpath
        String modifiedXpath;

        // Replace dynamic variable(s)
        modifiedXpath = xpathToBeModified.replaceFirst("DYNAMIC_LOCATOR_VARIABLE", dynamicVariable);

        // Wait for webelement to be visible
        try {
            WebDriverWait wait = new WebDriverWait(driver,90);
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(modifiedXpath)));
            Log4jLogger.info("Element is visible");

            // return webelement with dynamic xpath
            return driver.findElement(By.xpath(modifiedXpath));

        } catch (ElementNotVisibleException enve) {
            // Log and throw the ElementNotVisibleException
        	Log4jLogger.error(enve.getMessage());
        	Log4jLogger.error(enve.getAdditionalInformation());
            throw enve;
        } catch (ElementNotFoundException enfe) {
            // Log and throw the ElementNotFoundException
        	Log4jLogger.error(enfe.getMessage());
        	Log4jLogger.error(enfe.getElementName());
            throw enfe;
        } catch (Exception ex) {
        	Log4jLogger.error(ex.getMessage());
            throw ex;
        }
    }
}