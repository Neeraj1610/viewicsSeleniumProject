package com.myproject.basepageobject;

import java.io.File;
import java.io.IOException;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.ElementNotVisibleException;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.gargoylesoftware.htmlunit.ElementNotFoundException;
import com.myproject.tutorial.log4j.Log4jLogger;

public class BasePageObject {

	public WebDriver driver;

	public BasePageObject(WebDriver driver) {

        // Set the driver
        this.driver = driver;
    }
	
	public BasePageObject() {

        // Set 
    }

	/*
	 * Method to highlight web element
	 */
	private void highlightElement(WebElement element)
	{
		JavascriptExecutor jsExecutor=(JavascriptExecutor) driver;

		jsExecutor.executeScript("arguments[0].setAttribute('style', 'background: yellow; border: 2px solid red;');", element);
		try {
			Thread.sleep(500);
		} catch (InterruptedException e) {

			Log4jLogger.error(e.getMessage());
		}

		jsExecutor.executeScript("arguments[0].setAttribute('style','border: solid 2px white');", element);

	}

	/*
	 * Method to highlight element using Xpath
	 */
	private void highlightElement(String xpath)
	{

		JavascriptExecutor jsExecutor=(JavascriptExecutor) driver;

		jsExecutor.executeScript("arguments[0].setAttribute('style', 'background: yellow; border: 2px solid red;');", driver.findElement(By.xpath(xpath)));
	}

	
	/*
	 * Take screenshot method
	 */
	public void takeScreenShot(String destFilePath) throws IOException
	{
		
		TakesScreenshot takeScreenshot=(TakesScreenshot) driver;

		File srcFile=takeScreenshot.getScreenshotAs(OutputType.FILE);
		
		FileUtils.copyFile(srcFile, new File(destFilePath));		
	}

	/*
	 * Send keys method
	 */
	public void sendKeys(WebElement element,String text)
	{
		highlightElement(element);
		element.sendKeys(text);
	}

	/*
	 * Perform click
	 */
	public void click(WebElement element)
	{
		highlightElement(element);
		element.click();
	}
	
	/*
	 * Check if element is present using dynamic Xpath
	 */
	public boolean isElementPresent(String xpathToBeModified, String dynamicVariable) {

        // Declare modified xpath
        String modifiedXpath = xpathToBeModified;

        if (!dynamicVariable.equals("")) {
            // Replace dynamic variable(s)
            modifiedXpath = xpathToBeModified.replaceFirst("DYNAMIC_LOCATOR_VARIABLE", dynamicVariable);
        }

        // Wait for webelement to be visible
        try {
            WebDriverWait wait = new WebDriverWait(driver,30);
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(modifiedXpath)));
            Log4jLogger.info("Element is present");
            return true;
        } catch (Exception ex) {
            Log4jLogger.error("Element is not present");
            return false;
        }
	}
	
	/*
	 * Clear and set text in text box
	 */
    public void clearAndSetText(WebElement webElement, String text) throws Exception {

        // BasePageObjects basePageObjects = new BasePageObjects();
  
        Log4jLogger.info("Set text = '" + text + "' in '" + webElement + "'");

        // wait for text box to be visible

        waitForElementVisibility(webElement);

        // Set text
        click(webElement);
        webElement.clear();
        webElement.sendKeys(text);
    }
    
    /*
     * Wait for element visibility using webelement
     */
    public void waitForElementVisibility(WebElement elemToWaitForVisibility) throws ElementNotVisibleException {

        // Extract the Locator from WebElement
        String locator = null;
        if ((elemToWaitForVisibility instanceof WebElement)) {
            Object elemToWaitForVisibilityObject = elemToWaitForVisibility;
            String textOfElemToWaitForVisibility = elemToWaitForVisibilityObject.toString();

            /*
             * This will split text and get that locator of Element text is
             * something like this [[FirefoxDriver: firefox on WINDOWS
             * (9170d4a5-1554-4018-adac-f3f6385370c0)] -> xpath:
             * //div[contains(@
             * class,'forum-topic-preview')]//div[contains(@class,'small-human')
             * ]]
             */
            String[] arrayTextOfElemToWaitForVisibility = textOfElemToWaitForVisibility.split(":");
            String[] locatorType = arrayTextOfElemToWaitForVisibility[1].split(" ");
            for (int i = 0; i < arrayTextOfElemToWaitForVisibility.length; i++) {
                if (i == 0 || i == 1) {
                    textOfElemToWaitForVisibility = "";
                } else {
                    textOfElemToWaitForVisibility = textOfElemToWaitForVisibility
                            + arrayTextOfElemToWaitForVisibility[i];
                }
            }
            locator = locatorType[locatorType.length - 1] + " = ";
            locator = locator + textOfElemToWaitForVisibility;
        }
        try {

            WebDriverWait wait = new WebDriverWait(driver, 30);
            wait.until(ExpectedConditions.visibilityOf(elemToWaitForVisibility));
            Log4jLogger.info("Element is visible");

        } catch (ElementNotVisibleException enve) {
            // Log and throw the ElementNotVisibleException
            Log4jLogger.error(enve.getMessage());
            Log4jLogger.error(enve.getAdditionalInformation());
            throw enve;
        } catch (ElementNotFoundException enfe) {
            // Log and throw the ElementNotFoundException
            Log4jLogger.error(enfe.getMessage());
            Log4jLogger.error(enfe.getElementName());
            throw enfe;
        } catch (Exception ex) {
        	Log4jLogger.error(ex.getMessage());
            throw ex;
        }
    }
    
    /*
     * Get Web element having dynamic Xpath
     */
    public WebElement getWebElementWithDynamicXpath(String xpathToBeModified, String dynamicVariable) {

        // Declare modified xpath
        String modifiedXpath;

        // Replace dynamic variable(s)
        modifiedXpath = xpathToBeModified.replaceFirst("DYNAMIC_LOCATOR_VARIABLE", dynamicVariable);

        // Wait for webelement to be visible
        try {
            WebDriverWait wait = new WebDriverWait(driver,90);
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(modifiedXpath)));
            Log4jLogger.info("Element is visible");

            // return webelement with dynamic xpath
            return driver.findElement(By.xpath(modifiedXpath));

        } catch (ElementNotVisibleException enve) {
            // Log and throw the ElementNotVisibleException
        	Log4jLogger.error(enve.getMessage());
        	Log4jLogger.error(enve.getAdditionalInformation());
            throw enve;
        } catch (ElementNotFoundException enfe) {
            // Log and throw the ElementNotFoundException
        	Log4jLogger.error(enfe.getMessage());
        	Log4jLogger.error(enfe.getElementName());
            throw enfe;
        } catch (Exception ex) {
        	Log4jLogger.error(ex.getMessage());
            throw ex;
        }
    }
    
    /*
     * Wait for web page to load
     */
    public void waitForPageToLoad() {

        // BasePageObjects basePageObjects = new BasePageObjects();
        Log4jLogger.info("Wait for page to load");

        try {
            // Wait for page to load
            ExpectedCondition<Boolean> expectation = new ExpectedCondition<Boolean>() {

                public Boolean apply(WebDriver driver) {

                    return ((JavascriptExecutor) driver).executeScript("return document.readyState").toString()
                            .equals("complete");
                }
            };

            WebDriverWait wait = new WebDriverWait(driver, 60);
            wait.until(expectation);
        } catch (Throwable error) {
            // Log the error
            Log4jLogger.error(error.getMessage());
        }
    }
    
    /*
     * Perform click on checkbox
     */
    public void checkboxCheck(WebElement checkBox) throws Exception {

        // BasePageObjects basePageObjects = new BasePageObjects();
        Log4jLogger.info("Check the checkbox = " + checkBox);

        // Wait for checkbox to be enabled
        waitForElementClickability(checkBox);

        // Check the checkbox if it is currently unchecked. Do nothing if it is
        // already checked
        if (!checkBox.isSelected()) {
            checkBox.click();
            Log4jLogger.info("Checkbox = " + checkBox + " is checked");
        } else {
            Log4jLogger.info("Checkbox = " + checkBox + " is already checked");
        }

        // Check that checkbox is checked or not
        if (!checkBox.isSelected()) {
            // Checkbox is not checked
            Log4jLogger.error("Chechkbox = " + checkBox + " is not checked");
            throw new Exception("Chechkbox = " + checkBox + " is not checked");
        }
    }
    
    /*
     * Wait for element ot be clickable
     */
    public void waitForElementClickability(WebElement elemToWaitForClickability) throws Exception {

        // Wait for the element to be clickable in the given time in seconds
        // BasePageObjects basePageObjects = new BasePageObjects();

        // Extract the Locator from WebElement
        String locator = null;
        if ((elemToWaitForClickability instanceof WebElement)) {
            Object elemToWaitForClickabilityObject = elemToWaitForClickability;
            String textOfElemToWaitForClickability = elemToWaitForClickabilityObject.toString();

            /*
             * This will split text and get that locator of Element text is
             * something like this [[FirefoxDriver: firefox on WINDOWS
             * (9170d4a5-1554-4018-adac-f3f6385370c0)] -> xpath:
             * //div[contains(@
             * class,'forum-topic-preview')]//div[contains(@class,'small-human')
             * ]]
             */
            String[] arrayTextOfElemToWaitForClickability = textOfElemToWaitForClickability.split(":");
            String[] locatorType = arrayTextOfElemToWaitForClickability[1].split(" ");
            for (int i = 0; i < arrayTextOfElemToWaitForClickability.length; i++) {
                if (i == 0 || i == 1) {
                    textOfElemToWaitForClickability = "";
                } else {
                    textOfElemToWaitForClickability = textOfElemToWaitForClickability
                            + arrayTextOfElemToWaitForClickability[i];
                }
            }
            locator = locatorType[locatorType.length - 1] + " = ";
            locator = locator + textOfElemToWaitForClickability;
        }
        
        try {

            WebDriverWait wait = new WebDriverWait(driver, 30);
            wait.until(ExpectedConditions.elementToBeClickable(elemToWaitForClickability));
            Log4jLogger.info("Element is clickable");

        } catch (WebDriverException enve) {
            // Log and throw the WebDriverException
            Log4jLogger.error(enve.getAdditionalInformation());
            throw enve;
        } catch (ElementNotFoundException enfe) {
            // Log and throw the ElementNotFoundException
            Log4jLogger.error(enfe.getMessage());
            Log4jLogger.error(enfe.getElementName());
            throw enfe;
        } catch (Exception ex) {
            Log4jLogger.error(ex.getMessage());
            throw ex;
        }
    }
    
    /*
     * get count of elements in web page using xpath
     */
    public int getCountOfElementsInPage(String xpath) {

        try {
            return driver.findElements(By.xpath(xpath)).size();
        } catch (Exception ex) {
            Log4jLogger.error(ex.getMessage());
            throw ex;
        }
    }
    
    /*
     * Move mouse to specific element in web page
     */
    public void mouseHoverOnElement(String elementXpath, String dynamicVariable) {

        // BasePageObjects basePageObjects = new BasePageObjects();
        Log4jLogger.info("Mouse Hover on element with given xpath");

        WebElement element;
        Actions action = new Actions(driver);
        if (!dynamicVariable.equalsIgnoreCase("")) {
            element = getWebElementWithDynamicXpath(elementXpath, dynamicVariable);
        } else {
            element = driver.findElement(By.xpath(elementXpath));
        }

        // Hover on row
        action.moveToElement(element).build().perform();
    }
    
    /*
     *  Get Text of element
     */
    public String getText(String xpath) throws Exception {

        //wait for element to be visible
        waitForElementVisibility(getWebElementWithDynamicXpath(xpath, ""));
        String text = driver.findElement(By.xpath(xpath)).getText();

        // Get text value
        return text;
    }
}